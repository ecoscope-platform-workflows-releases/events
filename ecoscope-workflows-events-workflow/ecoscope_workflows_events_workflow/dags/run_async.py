# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details
import json
import os

from ecoscope_workflows_core.graph import DependsOn, DependsOnSequence, Graph, Node
from ecoscope_workflows_core.tasks.config import set_string_var, set_workflow_details
from ecoscope_workflows_core.tasks.filter import (
    get_timezone_from_time_range,
    set_time_range,
)
from ecoscope_workflows_core.tasks.groupby import set_groupers, split_groups
from ecoscope_workflows_core.tasks.io import persist_text, set_er_connection
from ecoscope_workflows_core.tasks.results import (
    create_map_widget_single_view,
    create_plot_widget_single_view,
    gather_dashboard,
    merge_widget_views,
)
from ecoscope_workflows_core.tasks.skip import (
    any_dependency_skipped,
    any_is_empty_df,
    never,
)
from ecoscope_workflows_core.tasks.transformation import (
    add_temporal_index,
    convert_values_to_timezone,
    extract_value_from_json_column,
    map_columns,
    map_values_with_unit,
    sort_values,
)
from ecoscope_workflows_ext_ecoscope.tasks.analysis import (
    calculate_feature_density,
    create_meshgrid,
)
from ecoscope_workflows_ext_ecoscope.tasks.io import get_events
from ecoscope_workflows_ext_ecoscope.tasks.results import (
    create_point_layer,
    create_polygon_layer,
    draw_ecomap,
    draw_pie_chart,
    draw_time_series_bar_chart,
    set_base_maps,
)
from ecoscope_workflows_ext_ecoscope.tasks.skip import all_geometry_are_none
from ecoscope_workflows_ext_ecoscope.tasks.transformation import (
    apply_color_map,
    apply_reloc_coord_filter,
    drop_nan_values_by_column,
)

from ..params import Params


def main(params: Params):
    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    dependencies = {
        "workflow_details": [],
        "er_client_name": [],
        "time_range": [],
        "get_timezone": ["time_range"],
        "get_events_data": ["er_client_name", "time_range"],
        "convert_to_user_timezone": ["get_events_data", "get_timezone"],
        "extract_reported_by": ["convert_to_user_timezone"],
        "groupers": [],
        "filter_events": ["extract_reported_by"],
        "events_add_temporal_index": ["filter_events", "groupers"],
        "events_colormap": ["events_add_temporal_index"],
        "set_bar_chart_title": [],
        "set_events_map_title": [],
        "set_pie_chart_title": [],
        "set_fd_map_title": [],
        "split_event_groups": ["events_colormap", "groupers"],
        "events_bar_chart": ["set_bar_chart_title", "split_event_groups"],
        "events_bar_chart_html_url": ["events_bar_chart"],
        "events_bar_chart_widget": ["set_bar_chart_title", "events_bar_chart_html_url"],
        "grouped_bar_plot_widget_merge": ["events_bar_chart_widget"],
        "rename_display_columns": ["split_event_groups"],
        "base_map_defs": [],
        "grouped_events_map_layer": ["rename_display_columns"],
        "grouped_events_ecomap": [
            "base_map_defs",
            "set_events_map_title",
            "grouped_events_map_layer",
        ],
        "grouped_events_ecomap_html_url": ["grouped_events_ecomap"],
        "grouped_events_map_widget": [
            "set_events_map_title",
            "grouped_events_ecomap_html_url",
        ],
        "grouped_events_map_widget_merge": ["grouped_events_map_widget"],
        "grouped_events_pie_chart": ["set_pie_chart_title", "split_event_groups"],
        "grouped_pie_chart_html_urls": ["grouped_events_pie_chart"],
        "grouped_events_pie_chart_widgets": [
            "set_pie_chart_title",
            "grouped_pie_chart_html_urls",
        ],
        "grouped_events_pie_widget_merge": ["grouped_events_pie_chart_widgets"],
        "events_meshgrid": ["events_add_temporal_index"],
        "grouped_events_feature_density": ["events_meshgrid", "split_event_groups"],
        "grouped_fd_colormap": ["grouped_events_feature_density"],
        "drop_nan_percentiles": ["grouped_fd_colormap"],
        "sort_grouped_density_values": ["drop_nan_percentiles"],
        "grouped_feature_density_format": ["sort_grouped_density_values"],
        "grouped_fd_map_layer": ["grouped_feature_density_format"],
        "grouped_fd_ecomap": [
            "base_map_defs",
            "set_fd_map_title",
            "grouped_fd_map_layer",
        ],
        "grouped_fd_ecomap_html_url": ["grouped_fd_ecomap"],
        "grouped_fd_map_widget": ["set_fd_map_title", "grouped_fd_ecomap_html_url"],
        "grouped_fd_map_widget_merge": ["grouped_fd_map_widget"],
        "events_dashboard": [
            "workflow_details",
            "grouped_bar_plot_widget_merge",
            "grouped_events_map_widget_merge",
            "grouped_events_pie_widget_merge",
            "grouped_fd_map_widget_merge",
            "groupers",
            "time_range",
        ],
    }

    nodes = {
        "workflow_details": Node(
            async_task=set_workflow_details.validate()
            .set_task_instance_id("workflow_details")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("workflow_details") or {}),
            method="call",
        ),
        "er_client_name": Node(
            async_task=set_er_connection.validate()
            .set_task_instance_id("er_client_name")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("er_client_name") or {}),
            method="call",
        ),
        "time_range": Node(
            async_task=set_time_range.validate()
            .set_task_instance_id("time_range")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "time_format": "%d %b %Y %H:%M:%S",
            }
            | (params_dict.get("time_range") or {}),
            method="call",
        ),
        "get_timezone": Node(
            async_task=get_timezone_from_time_range.validate()
            .set_task_instance_id("get_timezone")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "time_range": DependsOn("time_range"),
            }
            | (params_dict.get("get_timezone") or {}),
            method="call",
        ),
        "get_events_data": Node(
            async_task=get_events.validate()
            .set_task_instance_id("get_events_data")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "client": DependsOn("er_client_name"),
                "time_range": DependsOn("time_range"),
                "event_columns": [
                    "id",
                    "time",
                    "event_type",
                    "event_category",
                    "reported_by",
                    "serial_number",
                    "geometry",
                ],
                "raise_on_empty": False,
                "include_details": False,
                "include_updates": False,
                "include_related_events": False,
            }
            | (params_dict.get("get_events_data") or {}),
            method="call",
        ),
        "convert_to_user_timezone": Node(
            async_task=convert_values_to_timezone.validate()
            .set_task_instance_id("convert_to_user_timezone")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("get_events_data"),
                "timezone": DependsOn("get_timezone"),
                "columns": ["time"],
            }
            | (params_dict.get("convert_to_user_timezone") or {}),
            method="call",
        ),
        "extract_reported_by": Node(
            async_task=extract_value_from_json_column.validate()
            .set_task_instance_id("extract_reported_by")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("convert_to_user_timezone"),
                "column_name": "reported_by",
                "field_name_options": ["name"],
                "output_type": "str",
                "output_column_name": "reported_by_name",
            }
            | (params_dict.get("extract_reported_by") or {}),
            method="call",
        ),
        "groupers": Node(
            async_task=set_groupers.validate()
            .set_task_instance_id("groupers")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("groupers") or {}),
            method="call",
        ),
        "filter_events": Node(
            async_task=apply_reloc_coord_filter.validate()
            .set_task_instance_id("filter_events")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("extract_reported_by"),
                "roi_gdf": None,
                "roi_name": None,
            }
            | (params_dict.get("filter_events") or {}),
            method="call",
        ),
        "events_add_temporal_index": Node(
            async_task=add_temporal_index.validate()
            .set_task_instance_id("events_add_temporal_index")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("filter_events"),
                "time_col": "time",
                "groupers": DependsOn("groupers"),
                "cast_to_datetime": True,
                "format": "mixed",
            }
            | (params_dict.get("events_add_temporal_index") or {}),
            method="call",
        ),
        "events_colormap": Node(
            async_task=apply_color_map.validate()
            .set_task_instance_id("events_colormap")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("events_add_temporal_index"),
                "input_column_name": "event_type",
                "colormap": "tab20b",
                "output_column_name": "event_type_colormap",
            }
            | (params_dict.get("events_colormap") or {}),
            method="call",
        ),
        "set_bar_chart_title": Node(
            async_task=set_string_var.validate()
            .set_task_instance_id("set_bar_chart_title")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "var": "Events Bar Chart",
            }
            | (params_dict.get("set_bar_chart_title") or {}),
            method="call",
        ),
        "set_events_map_title": Node(
            async_task=set_string_var.validate()
            .set_task_instance_id("set_events_map_title")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "var": "Events Map",
            }
            | (params_dict.get("set_events_map_title") or {}),
            method="call",
        ),
        "set_pie_chart_title": Node(
            async_task=set_string_var.validate()
            .set_task_instance_id("set_pie_chart_title")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "var": "Events Pie Chart",
            }
            | (params_dict.get("set_pie_chart_title") or {}),
            method="call",
        ),
        "set_fd_map_title": Node(
            async_task=set_string_var.validate()
            .set_task_instance_id("set_fd_map_title")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "var": "Density Map",
            }
            | (params_dict.get("set_fd_map_title") or {}),
            method="call",
        ),
        "split_event_groups": Node(
            async_task=split_groups.validate()
            .set_task_instance_id("split_event_groups")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "df": DependsOn("events_colormap"),
                "groupers": DependsOn("groupers"),
            }
            | (params_dict.get("split_event_groups") or {}),
            method="call",
        ),
        "events_bar_chart": Node(
            async_task=draw_time_series_bar_chart.validate()
            .set_task_instance_id("events_bar_chart")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "x_axis": "time",
                "y_axis": "event_type",
                "category": "event_type",
                "agg_function": "count",
                "color_column": "event_type_colormap",
                "plot_style": {"xperiodalignment": "middle"},
                "layout_style": None,
                "widget_id": DependsOn("set_bar_chart_title"),
            }
            | (params_dict.get("events_bar_chart") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["dataframe"],
                "argvalues": DependsOn("split_event_groups"),
            },
        ),
        "events_bar_chart_html_url": Node(
            async_task=persist_text.validate()
            .set_task_instance_id("events_bar_chart_html_url")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "root_path": os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
                "filename_suffix": "v2",
            }
            | (params_dict.get("events_bar_chart_html_url") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["text"],
                "argvalues": DependsOn("events_bar_chart"),
            },
        ),
        "events_bar_chart_widget": Node(
            async_task=create_plot_widget_single_view.validate()
            .set_task_instance_id("events_bar_chart_widget")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": DependsOn("set_bar_chart_title"),
            }
            | (params_dict.get("events_bar_chart_widget") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("events_bar_chart_html_url"),
            },
        ),
        "grouped_bar_plot_widget_merge": Node(
            async_task=merge_widget_views.validate()
            .set_task_instance_id("grouped_bar_plot_widget_merge")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("events_bar_chart_widget"),
            }
            | (params_dict.get("grouped_bar_plot_widget_merge") or {}),
            method="call",
        ),
        "rename_display_columns": Node(
            async_task=map_columns.validate()
            .set_task_instance_id("rename_display_columns")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "drop_columns": [],
                "retain_columns": [],
                "rename_columns": {
                    "serial_number": "Event Serial",
                    "time": "Event Time",
                    "event_type": "Event Type",
                    "reported_by_name": "Reported By",
                },
            }
            | (params_dict.get("rename_display_columns") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("split_event_groups"),
            },
        ),
        "base_map_defs": Node(
            async_task=set_base_maps.validate()
            .set_task_instance_id("base_map_defs")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial=(params_dict.get("base_map_defs") or {}),
            method="call",
        ),
        "grouped_events_map_layer": Node(
            async_task=create_point_layer.validate()
            .set_task_instance_id("grouped_events_map_layer")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                    all_geometry_are_none,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "layer_style": {
                    "fill_color_column": "event_type_colormap",
                    "get_radius": 5,
                },
                "legend": {
                    "label_column": "Event Type",
                    "color_column": "event_type_colormap",
                },
                "tooltip_columns": [
                    "Event Serial",
                    "Event Time",
                    "Event Type",
                    "Reported By",
                ],
            }
            | (params_dict.get("grouped_events_map_layer") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geodataframe"],
                "argvalues": DependsOn("rename_display_columns"),
            },
        ),
        "grouped_events_ecomap": Node(
            async_task=draw_ecomap.validate()
            .set_task_instance_id("grouped_events_ecomap")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": None,
                "tile_layers": DependsOn("base_map_defs"),
                "north_arrow_style": {"placement": "top-left"},
                "legend_style": {
                    "title": "Event Type",
                    "format_title": False,
                    "placement": "bottom-right",
                },
                "static": False,
                "max_zoom": 20,
                "widget_id": DependsOn("set_events_map_title"),
            }
            | (params_dict.get("grouped_events_ecomap") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geo_layers"],
                "argvalues": DependsOn("grouped_events_map_layer"),
            },
        ),
        "grouped_events_ecomap_html_url": Node(
            async_task=persist_text.validate()
            .set_task_instance_id("grouped_events_ecomap_html_url")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "root_path": os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
                "filename_suffix": "v2",
            }
            | (params_dict.get("grouped_events_ecomap_html_url") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["text"],
                "argvalues": DependsOn("grouped_events_ecomap"),
            },
        ),
        "grouped_events_map_widget": Node(
            async_task=create_map_widget_single_view.validate()
            .set_task_instance_id("grouped_events_map_widget")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": DependsOn("set_events_map_title"),
            }
            | (params_dict.get("grouped_events_map_widget") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("grouped_events_ecomap_html_url"),
            },
        ),
        "grouped_events_map_widget_merge": Node(
            async_task=merge_widget_views.validate()
            .set_task_instance_id("grouped_events_map_widget_merge")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("grouped_events_map_widget"),
            }
            | (params_dict.get("grouped_events_map_widget_merge") or {}),
            method="call",
        ),
        "grouped_events_pie_chart": Node(
            async_task=draw_pie_chart.validate()
            .set_task_instance_id("grouped_events_pie_chart")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "value_column": "event_type",
                "color_column": "event_type_colormap",
                "plot_style": {"textinfo": "value"},
                "label_column": None,
                "layout_style": None,
                "widget_id": DependsOn("set_pie_chart_title"),
            }
            | (params_dict.get("grouped_events_pie_chart") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["dataframe"],
                "argvalues": DependsOn("split_event_groups"),
            },
        ),
        "grouped_pie_chart_html_urls": Node(
            async_task=persist_text.validate()
            .set_task_instance_id("grouped_pie_chart_html_urls")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "root_path": os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
                "filename_suffix": "v2",
            }
            | (params_dict.get("grouped_pie_chart_html_urls") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["text"],
                "argvalues": DependsOn("grouped_events_pie_chart"),
            },
        ),
        "grouped_events_pie_chart_widgets": Node(
            async_task=create_plot_widget_single_view.validate()
            .set_task_instance_id("grouped_events_pie_chart_widgets")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": DependsOn("set_pie_chart_title"),
            }
            | (params_dict.get("grouped_events_pie_chart_widgets") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("grouped_pie_chart_html_urls"),
            },
        ),
        "grouped_events_pie_widget_merge": Node(
            async_task=merge_widget_views.validate()
            .set_task_instance_id("grouped_events_pie_widget_merge")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("grouped_events_pie_chart_widgets"),
            }
            | (params_dict.get("grouped_events_pie_widget_merge") or {}),
            method="call",
        ),
        "events_meshgrid": Node(
            async_task=create_meshgrid.validate()
            .set_task_instance_id("events_meshgrid")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                    all_geometry_are_none,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "aoi": DependsOn("events_add_temporal_index"),
                "intersecting_only": False,
            }
            | (params_dict.get("events_meshgrid") or {}),
            method="call",
        ),
        "grouped_events_feature_density": Node(
            async_task=calculate_feature_density.validate()
            .set_task_instance_id("grouped_events_feature_density")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "meshgrid": DependsOn("events_meshgrid"),
                "geometry_type": "point",
            }
            | (params_dict.get("grouped_events_feature_density") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geodataframe"],
                "argvalues": DependsOn("split_event_groups"),
            },
        ),
        "grouped_fd_colormap": Node(
            async_task=apply_color_map.validate()
            .set_task_instance_id("grouped_fd_colormap")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "input_column_name": "density",
                "colormap": "RdYlGn_r",
                "output_column_name": "density_colormap",
            }
            | (params_dict.get("grouped_fd_colormap") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("grouped_events_feature_density"),
            },
        ),
        "drop_nan_percentiles": Node(
            async_task=drop_nan_values_by_column.validate()
            .set_task_instance_id("drop_nan_percentiles")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "column_name": "density",
            }
            | (params_dict.get("drop_nan_percentiles") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("grouped_fd_colormap"),
            },
        ),
        "sort_grouped_density_values": Node(
            async_task=sort_values.validate()
            .set_task_instance_id("sort_grouped_density_values")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "column_name": "density",
                "ascending": True,
                "na_position": "last",
            }
            | (params_dict.get("sort_grouped_density_values") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("drop_nan_percentiles"),
            },
        ),
        "grouped_feature_density_format": Node(
            async_task=map_values_with_unit.validate()
            .set_task_instance_id("grouped_feature_density_format")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "original_unit": None,
                "new_unit": None,
                "input_column_name": "density",
                "output_column_name": "density",
                "decimal_places": 0,
            }
            | (params_dict.get("grouped_feature_density_format") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["df"],
                "argvalues": DependsOn("sort_grouped_density_values"),
            },
        ),
        "grouped_fd_map_layer": Node(
            async_task=create_polygon_layer.validate()
            .set_task_instance_id("grouped_fd_map_layer")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                    all_geometry_are_none,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "layer_style": {
                    "fill_color_column": "density_colormap",
                    "get_line_width": 0,
                    "opacity": 0.4,
                },
                "legend": {
                    "label_column": "density",
                    "color_column": "density_colormap",
                },
                "tooltip_columns": ["density"],
            }
            | (params_dict.get("grouped_fd_map_layer") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geodataframe"],
                "argvalues": DependsOn("grouped_feature_density_format"),
            },
        ),
        "grouped_fd_ecomap": Node(
            async_task=draw_ecomap.validate()
            .set_task_instance_id("grouped_fd_ecomap")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": None,
                "tile_layers": DependsOn("base_map_defs"),
                "north_arrow_style": {"placement": "top-left"},
                "legend_style": {
                    "title": "Number Of Events",
                    "format_title": False,
                    "placement": "bottom-right",
                },
                "static": False,
                "max_zoom": 20,
                "widget_id": DependsOn("set_fd_map_title"),
            }
            | (params_dict.get("grouped_fd_ecomap") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["geo_layers"],
                "argvalues": DependsOn("grouped_fd_map_layer"),
            },
        ),
        "grouped_fd_ecomap_html_url": Node(
            async_task=persist_text.validate()
            .set_task_instance_id("grouped_fd_ecomap_html_url")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "root_path": os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
                "filename_suffix": "v2",
            }
            | (params_dict.get("grouped_fd_ecomap_html_url") or {}),
            method="mapvalues",
            kwargs={
                "argnames": ["text"],
                "argvalues": DependsOn("grouped_fd_ecomap"),
            },
        ),
        "grouped_fd_map_widget": Node(
            async_task=create_map_widget_single_view.validate()
            .set_task_instance_id("grouped_fd_map_widget")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    never,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "title": DependsOn("set_fd_map_title"),
            }
            | (params_dict.get("grouped_fd_map_widget") or {}),
            method="map",
            kwargs={
                "argnames": ["view", "data"],
                "argvalues": DependsOn("grouped_fd_ecomap_html_url"),
            },
        ),
        "grouped_fd_map_widget_merge": Node(
            async_task=merge_widget_views.validate()
            .set_task_instance_id("grouped_fd_map_widget_merge")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "widgets": DependsOn("grouped_fd_map_widget"),
            }
            | (params_dict.get("grouped_fd_map_widget_merge") or {}),
            method="call",
        ),
        "events_dashboard": Node(
            async_task=gather_dashboard.validate()
            .set_task_instance_id("events_dashboard")
            .handle_errors()
            .with_tracing()
            .skipif(
                conditions=[
                    any_is_empty_df,
                    any_dependency_skipped,
                ],
                unpack_depth=1,
            )
            .set_executor("lithops"),
            partial={
                "details": DependsOn("workflow_details"),
                "widgets": DependsOnSequence(
                    [
                        DependsOn("grouped_bar_plot_widget_merge"),
                        DependsOn("grouped_events_map_widget_merge"),
                        DependsOn("grouped_events_pie_widget_merge"),
                        DependsOn("grouped_fd_map_widget_merge"),
                    ],
                ),
                "groupers": DependsOn("groupers"),
                "time_range": DependsOn("time_range"),
            }
            | (params_dict.get("events_dashboard") or {}),
            method="call",
        ),
    }
    graph = Graph(dependencies=dependencies, nodes=nodes)
    results = graph.execute()
    return results
