# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details


from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class WorkflowDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., title="Workflow Name")
    description: Optional[str] = Field("", title="Workflow Description")


class TimeRange(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    since: AwareDatetime = Field(..., description="The start time", title="Since")
    until: AwareDatetime = Field(..., description="The end time", title="Until")


class GetEventsData(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    event_types: List[str] = Field(
        ..., description="list of event types", title="Event Types"
    )
    drop_null_geometry: Optional[bool] = Field(
        False,
        description="Whether or not to keep events with no geometry data",
        title="Drop Null Geometry",
    )


class TimeInterval(str, Enum):
    year = "year"
    month = "month"
    week = "week"
    day = "day"
    hour = "hour"


class EventsBarChart(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    time_interval: TimeInterval = Field(
        ..., description="Sets the time interval of the x axis.", title="Time Interval"
    )


class EventsMeshgrid(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cell_width: Optional[int] = Field(
        10000, description="The width of a grid cell in meters.", title="Cell Width"
    )
    cell_height: Optional[int] = Field(
        10000, description="The height of a grid cell in meters.", title="Cell Height"
    )


class EarthRangerConnection(BaseModel):
    name: str = Field(..., title="Data Source")


class TemporalGrouper(RootModel[str]):
    root: str = Field(..., title="Time")


class ValueGrouper(RootModel[str]):
    root: str = Field(..., title="Category")


class Coordinate(BaseModel):
    x: float = Field(..., title="X")
    y: float = Field(..., title="Y")


class ErClientName(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    data_source: EarthRangerConnection = Field(
        ..., description="Select one of your configured data sources.", title=""
    )


class Groupers(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    groupers: Optional[List[Union[ValueGrouper, TemporalGrouper]]] = Field(
        None,
        description="            Specify how the data should be grouped to create the views for your dashboard.\n            This field is optional; if left blank, all the data will appear in a single view.\n            ",
        title=" ",
    )


class FilterEvents(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    min_x: Optional[float] = Field(-180.0, title="Min X")
    max_x: Optional[float] = Field(180.0, title="Max X")
    min_y: Optional[float] = Field(-90.0, title="Min Y")
    max_y: Optional[float] = Field(90.0, title="Max Y")
    filter_point_coords: Optional[List[Coordinate]] = Field(
        [], title="Filter Point Coords"
    )


class FormData(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    workflow_details: Optional[WorkflowDetails] = Field(
        None,
        description="Add information that will help to differentiate this workflow from another.",
        title="Workflow Details",
    )
    er_client_name: Optional[ErClientName] = Field(None, title="Data Source")
    time_range: Optional[TimeRange] = Field(
        None, description="Choose the period of time to analyze.", title="Time Range"
    )
    get_events_data: Optional[GetEventsData] = Field(
        None, title="Get Events from EarthRanger"
    )
    groupers: Optional[Groupers] = Field(None, title="Group Data")
    filter_events: Optional[FilterEvents] = Field(
        None, title="Apply Relocation Coordinate Filter"
    )
    events_bar_chart: Optional[EventsBarChart] = Field(
        None, title="Draw Time Series Bar Chart for Events"
    )
    events_meshgrid: Optional[EventsMeshgrid] = Field(
        None, title="Create Events Meshgrid"
    )
